*devcontainer.txt*    DevContainer support for Neovim

                    DEVCONTAINER.NVIM REFERENCE MANUAL

==============================================================================
CONTENTS                                                *devcontainer-contents*

    1. Introduction ......................... |devcontainer-introduction|
    2. Requirements ......................... |devcontainer-requirements|
    3. Installation ......................... |devcontainer-installation|
    4. Quick Start .......................... |devcontainer-quickstart|
    5. Commands ............................. |devcontainer-commands|
    6. Enhanced Terminal Integration ........ |devcontainer-terminal|
    7. Configuration ........................ |devcontainer-configuration|
    8. Notification Levels .................. |devcontainer-notification-levels|
    9. API .................................. |devcontainer-api|
    10. devcontainer.json ................... |devcontainer-json|
    11. Troubleshooting ..................... |devcontainer-troubleshooting|
    12. User Events ......................... |devcontainer-events|
    13. Contributing ........................ |devcontainer-contributing|

==============================================================================
1. INTRODUCTION                                     *devcontainer-introduction*

devcontainer.nvim brings VSCode Dev Containers functionality to Neovim,
allowing you to develop inside Docker containers with full LSP support and
seamless integration.

Key features:
  • Full devcontainer.json compatibility
  • Automatic LSP server detection and configuration
  • Enhanced terminal integration with session management
  • Asynchronous Docker operations
  • Smart port forwarding with dynamic allocation
  • Project-specific container isolation

==============================================================================
2. REQUIREMENTS                                     *devcontainer-requirements*

  • Neovim 0.8.0 or higher
  • Docker or Podman installed and running
  • Git (for cloning repositories)
  • Optional: nvim-lspconfig for LSP integration

==============================================================================
3. INSTALLATION                                     *devcontainer-installation*

Using lazy.nvim: >lua

    {
      'ksoichiro/devcontainer.nvim',
      dependencies = {
        'nvim-lua/plenary.nvim',
      },
      config = function()
        require('devcontainer').setup({
          -- your configuration
        })
      end,
    }
<

Using packer.nvim: >lua

    use {
      'ksoichiro/devcontainer.nvim',
      requires = {
        'nvim-lua/plenary.nvim',
      },
      config = function()
        require('devcontainer').setup()
      end,
    }
<

==============================================================================
4. QUICK START                                        *devcontainer-quickstart*

1. Create a `.devcontainer/devcontainer.json` file in your project:
>json
    {
      "name": "My Project",
      "image": "mcr.microsoft.com/devcontainers/base:ubuntu",
      "postCreateCommand": "echo 'Container ready!'"
    }
<

2. Open the devcontainer:
>vim
    :DevcontainerOpen
    :DevcontainerStart
<

3. Open a terminal in the container:
>vim
    :DevcontainerTerminal
<

==============================================================================
5. COMMANDS                                            *devcontainer-commands*

Basic Operations~
                                                          *:DevcontainerOpen*
:DevcontainerOpen [path]
    Open and parse devcontainer configuration from the specified path or
    current directory. This loads the devcontainer.json file but doesn't
    start the container.

                                                         *:DevcontainerBuild*
:DevcontainerBuild
    Build the Docker image specified in the devcontainer configuration.
    Required if using a Dockerfile instead of a pre-built image.

                                                         *:DevcontainerStart*
:DevcontainerStart
    Start the devcontainer. This will build the image if necessary, create
    the container, and run any postCreateCommand.

                                                          *:DevcontainerStop*
:DevcontainerStop
    Stop the running devcontainer.

                                                          *:DevcontainerKill*
:DevcontainerKill[!]
    Kill the devcontainer immediately without graceful shutdown.
    Requires confirmation unless [!] is used to skip the prompt.
    This may cause data loss.

                                                     *:DevcontainerTerminate*
:DevcontainerTerminate[!]
    Terminate the devcontainer immediately (alias for kill).
    Requires confirmation unless [!] is used to skip the prompt.
    This may cause data loss.

                                                       *:DevcontainerRestart*
:DevcontainerRestart
    Stop and restart the devcontainer.

Execution & Access~
                                                          *:DevcontainerExec*
:DevcontainerExec {command}
    Execute a command inside the running container.
    Example: >vim
        :DevcontainerExec npm install
<


Information Display~
                                                        *:DevcontainerStatus*
:DevcontainerStatus
    Show the current status of the devcontainer, including container ID,
    state, image, and port mappings.

                                                          *:DevcontainerLogs*
:DevcontainerLogs [follow]
    Show container logs. Add 'follow' or 'f' to follow log output.
    Example: >vim
        :DevcontainerLogs follow
<

                                                        *:DevcontainerConfig*
:DevcontainerConfig
    Display the current plugin configuration.

LSP Integration~
                                                     *:DevcontainerLspStatus*
:DevcontainerLspStatus
    Show the status of LSP servers detected and running in the container.

                                                      *:DevcontainerLspSetup*
:DevcontainerLspSetup
    Manually setup LSP servers in the container. Usually this happens
    automatically.

Port Management~
                                                         *:DevcontainerPorts*
:DevcontainerPorts
    Show detailed port forwarding information including configured ports,
    dynamic allocations, and active Docker port mappings.

                                                     *:DevcontainerPortStats*
:DevcontainerPortStats
    Show port allocation statistics including usage by project, purpose,
    and dynamic range utilization.

Management~
                                                         *:DevcontainerReset*
:DevcontainerReset
    Reset the plugin state. Useful if the plugin gets into an inconsistent
    state.

                                                         *:DevcontainerDebug*
:DevcontainerDebug
    Show comprehensive debug information including Docker status, container
    details, configuration, and LSP state.

                                                     *:DevcontainerReconnect*
:DevcontainerReconnect
    Attempt to reconnect to an existing devcontainer. Useful after restarting
    Neovim.

                                                    *:DevcontainerAutoStart*
:DevcontainerAutoStart [mode]
    Configure auto-start behavior. Available modes:
      off       - Disable auto-start
      notify    - Show notification when devcontainer.json is found
      prompt    - Prompt user to start container
      immediate - Start container automatically

    Without arguments, shows current configuration.
    Example: >vim
        :DevcontainerAutoStart prompt
<

Enhanced Terminal Commands~
                                                     *:DevcontainerTerminal*
:DevcontainerTerminal [options]
    Open an enhanced terminal session in the container. Supports session
    management, flexible positioning, and persistent history.

    Options can be provided as arguments:
      --position=<pos>    Position: split, vsplit, tab, float
      --name=<name>       Session name
      --shell=<shell>     Shell to use
      --size=<size>       Window size
      --split, --vsplit, --tab, --float  Position shortcuts

    Examples: >vim
        :DevcontainerTerminal
        :DevcontainerTerminal --position=float --name=build
        :DevcontainerTerminal --float --name=dev --shell=/bin/zsh
<

                                                  *:DevcontainerTerminalNew*
:DevcontainerTerminalNew [name]
    Create a new terminal session with the specified name.
    Example: >vim
        :DevcontainerTerminalNew build
<

                                                 *:DevcontainerTerminalList*
:DevcontainerTerminalList
    List all active terminal sessions with their status and details.

                                                *:DevcontainerTerminalClose*
:DevcontainerTerminalClose [name]
    Close the specified terminal session. If no name is provided, closes
    the current session.
    Example: >vim
        :DevcontainerTerminalClose build
<

                                             *:DevcontainerTerminalCloseAll*
:DevcontainerTerminalCloseAll
    Close all terminal sessions.

                                                *:DevcontainerTerminalNext*
:DevcontainerTerminalNext
    Switch to the next terminal session in the list.

                                                *:DevcontainerTerminalPrev*
:DevcontainerTerminalPrev
    Switch to the previous terminal session in the list.

                                              *:DevcontainerTerminalStatus*
:DevcontainerTerminalStatus
    Show comprehensive status of the terminal system including active
    sessions, history statistics, and configuration.

                                             *:DevcontainerTerminalRename*
:DevcontainerTerminalRename {old_name} {new_name}
    Rename a terminal session.
    Example: >vim
        :DevcontainerTerminalRename main development
<

                                            *:DevcontainerTerminalCleanup*
:DevcontainerTerminalCleanup [days]
    Clean up old terminal history files. Default is 30 days.
    Example: >vim
        :DevcontainerTerminalCleanup 7
<

Telescope Integration~
                                                       *:DevcontainerPicker*
:DevcontainerPicker
    Open Telescope picker to manage devcontainers. Requires Telescope and
    ui.use_telescope = true in configuration.

                                                *:DevcontainerSessionPicker*
:DevcontainerSessionPicker
    Open Telescope picker to manage terminal sessions. Requires Telescope
    and ui.use_telescope = true in configuration.

                                                   *:DevcontainerPortPicker*
:DevcontainerPortPicker
    Open Telescope picker to manage ports. Requires Telescope and
    ui.use_telescope = true in configuration.

                                                *:DevcontainerHistoryPicker*
:DevcontainerHistoryPicker
    Open Telescope picker to browse command history. Requires Telescope
    and ui.use_telescope = true in configuration.

==============================================================================
6. ENHANCED TERMINAL INTEGRATION                      *devcontainer-terminal*

The enhanced terminal system provides advanced in-container terminal
capabilities with session management, flexible positioning, and persistent
history.

Features~

Session Management:
  • Named terminal sessions for organized workflow
  • Multiple concurrent sessions per container
  • Session persistence across Neovim restarts
  • Automatic session cleanup and validation

Flexible Positioning:
  • Horizontal split (split)
  • Vertical split (vsplit)
  • New tab (tab)
  • Floating window (float)
  • Configurable window sizes and appearance

Persistent History:
  • Terminal history saved across sessions
  • Project-based history isolation using SHA256 hashes
  • Configurable history limits and cleanup
  • Automatic history restoration on session reopening

Terminal Session Workflow~

1. Create a new session:
>vim
    :DevcontainerTerminal --name=dev --position=float
<

2. List active sessions:
>vim
    :DevcontainerTerminalList
<

3. Switch between sessions:
>vim
    :DevcontainerTerminalNext
    :DevcontainerTerminalPrev
<

4. Create specialized sessions:
>vim
    :DevcontainerTerminal --name=build --position=vsplit --shell=/bin/zsh
    :DevcontainerTerminal --name=test --position=tab
<

5. Close sessions when done:
>vim
    :DevcontainerTerminalClose build
    :DevcontainerTerminalCloseAll
<

Session Management~

Sessions are automatically managed with the following behaviors:

Valid Sessions:
  • Have an active buffer and running job
  • Display with ● (filled circle) in session lists
  • Can be switched to and interacted with

Invalid Sessions:
  • Have terminated jobs or deleted buffers
  • Display with ○ (empty circle) in session lists
  • Are automatically cleaned up when accessed

Session Names:
  • Default session is named "main"
  • Custom names can be specified
  • Names must be unique per container
  • Use descriptive names for better workflow organization

History Persistence~

Terminal history is automatically saved and restored:

Project Isolation:
  • Each project gets its own history directory
  • Based on SHA256 hash of project path (first 8 characters)
  • Prevents history conflicts between projects

Storage Location:
  • Default: ~/.local/share/nvim/devcontainer/terminal_history/
  • Organized by project hash and session name
  • Example: ~/.local/share/nvim/devcontainer/terminal_history/a1b2c3d4/main.history

History Management:
  • Automatic saving on buffer changes and exits
  • Configurable maximum history lines (default: 10000)
  • Manual cleanup with :DevcontainerTerminalCleanup
  • History statistics with :DevcontainerTerminalStatus

Terminal Positioning~

Split Positioning:
  • split: Horizontal split below current window
  • vsplit: Vertical split to the right of current window
  • Configurable heights and widths
  • Respects ratio or absolute values

Tab Positioning:
  • Creates new tab for terminal
  • Full-screen terminal experience
  • Good for dedicated terminal work

Float Positioning:
  • Centered floating window
  • Configurable size ratios
  • Border and title customization
  • Overlay-style terminal access

Position Examples:
>vim
    " Quick horizontal split
    :DevcontainerTerminal --split

    " Large vertical split
    :DevcontainerTerminal --vsplit --size=100

    " Floating window with custom size
    :DevcontainerTerminal --float --name=scratch

    " Full-screen tab
    :DevcontainerTerminal --tab --name=fullscreen
<

Advanced Usage~

Multiple Session Workflow:
>vim
    " Development workflow with multiple sessions
    :DevcontainerTerminal --name=server --split     " Main server
    :DevcontainerTerminal --name=build --vsplit     " Build process
    :DevcontainerTerminal --name=test --tab         " Testing
    :DevcontainerTerminal --name=scratch --float    " Quick commands
<

Session Keybindings:
The terminal system supports configurable keybindings within terminal buffers:
  • <C-q>: Close current terminal (default)
  • <C-\><C-n>: Exit terminal mode (default)
  • <leader>tn: Create new session (normal mode)
  • <leader>tl: List sessions (normal mode)
  • <leader>t]: Next session (normal mode)
  • <leader>t[: Previous session (normal mode)

Session Monitoring:
>vim
    " Check terminal system status
    :DevcontainerTerminalStatus

    " View history statistics
    :DevcontainerTerminalStatus

    " List active sessions with details
    :DevcontainerTerminalList
<

Troubleshooting Terminal Issues~

Session Not Starting:
  1. Verify container is running: :DevcontainerStatus
  2. Check terminal configuration: :DevcontainerConfig
  3. Try different shell: --shell=/bin/sh

History Not Persisting:
  1. Check persistent_history configuration
  2. Verify history directory permissions
  3. Check disk space for history storage

Session List Empty:
  1. Sessions auto-cleanup when invalid
  2. Create new session: :DevcontainerTerminalNew
  3. Check container connectivity

Performance Issues:
  1. Reduce max_history_lines in configuration
  2. Clean old history: :DevcontainerTerminalCleanup
  3. Disable persistent_history if not needed

==============================================================================
7. CONFIGURATION                                   *devcontainer-configuration*

Configure the plugin by passing options to the setup function:
>lua
    require('devcontainer').setup({
      -- Options here
    })
<

Options~

auto_start                                      *devcontainer-config-auto_start*
    Type: |boolean|
    Default: `false`

    Automatically start containers when opening projects with
    devcontainer.json.

log_level                                        *devcontainer-config-log_level*
    Type: |string|
    Default: `"info"`

    Logging level. Options: "debug", "info", "warn", "error".

container_runtime                        *devcontainer-config-container_runtime*
    Type: |string|
    Default: `"docker"`

    Container runtime to use. Options: "docker", "podman".

ui                                                      *devcontainer-config-ui*
    Type: |table|
    Default: See below

    UI configuration options:
>lua
    ui = {
      picker = 'telescope',           -- 'telescope', 'fzf-lua', 'vim.ui.select'
      show_notifications = true,      -- Show notifications
      notification_level = 'normal',  -- 'verbose', 'normal', 'minimal', 'silent'
      status_line = true,             -- Show in statusline
      icons = {
        container = "🐳",
        running = "✅",
        stopped = "⏹️",
        building = "🔨",
        error = "❌",
      },
    }
<

terminal                                          *devcontainer-config-terminal*
    Type: |table|
    Default: See below

    Enhanced terminal configuration:
>lua
    terminal = {
      -- Default shell and behavior
      default_shell = '/bin/bash',      -- Default shell for new sessions
      auto_insert = true,               -- Auto enter insert mode
      close_on_exit = false,           -- Keep buffer after process exit

      -- Session management
      persistent_history = true,        -- Save history across sessions
      max_history_lines = 10000,       -- Max lines in history
      history_dir = vim.fn.stdpath('data') .. '/devcontainer/terminal_history',

      -- Default positioning
      default_position = 'split',       -- 'split', 'vsplit', 'tab', 'float'

      -- Split configuration
      split = {
        height = 15,                    -- Lines for horizontal split
        width = 80,                     -- Columns for vertical split
      },

      -- Float configuration
      float = {
        width = 0.8,                    -- Ratio of editor width
        height = 0.6,                   -- Ratio of editor height
        border = 'rounded',             -- Border style
        title = 'DevContainer Terminal',
        title_pos = 'center',           -- Title position
      },

      -- Environment variables for terminal
      environment = {
        'TERM=xterm-256color',
        'COLORTERM=truecolor',
      },

      -- Keymaps for terminal mode
      keymaps = {
        -- Terminal mode keymaps
        close = '<C-q>',                -- Close terminal
        escape = '<C-\\><C-n>',         -- Exit terminal mode

        -- Normal mode keymaps
        new_session = '<leader>tn',     -- Create new session
        list_sessions = '<leader>tl',   -- List sessions
        next_session = '<leader>t]',    -- Next session
        prev_session = '<leader>t[',    -- Previous session
      },
    }
<

Terminal Configuration Options:

Basic Settings:
  • default_shell          - Default shell for new terminal sessions
  • auto_insert           - Automatically enter insert mode when opening terminal
  • close_on_exit         - Close buffer when terminal process exits

Session Management:
  • persistent_history    - Enable terminal history persistence
  • max_history_lines     - Maximum lines to keep in history files
  • history_dir          - Directory for storing terminal history

Positioning:
  • default_position     - Default position for new terminals
  • split.height         - Height for horizontal splits (lines or ratio)
  • split.width          - Width for vertical splits (columns or ratio)
  • float.width          - Width ratio for floating windows (0.0-1.0)
  • float.height         - Height ratio for floating windows (0.0-1.0)
  • float.border         - Border style for floating windows
  • float.title          - Title for floating terminal windows
  • float.title_pos      - Title position ('left', 'center', 'right')

Environment:
  • environment           - Array of environment variables for terminal

Keybindings:
  • keymaps.close         - Keymap to close terminal (terminal mode)
  • keymaps.escape        - Keymap to exit terminal mode
  • keymaps.new_session   - Keymap to create new session (normal mode)
  • keymaps.list_sessions - Keymap to list sessions (normal mode)
  • keymaps.next_session  - Keymap to switch to next session (normal mode)
  • keymaps.prev_session  - Keymap to switch to previous session (normal mode)

port_forwarding                            *devcontainer-config-port_forwarding*
    Type: |table|
    Default: See below

    Port forwarding configuration:
>lua
    port_forwarding = {
      auto_forward = true,                   -- Auto-forward common ports
      notification = true,                   -- Show port forwarding notifications
      bind_address = '127.0.0.1',          -- Bind address for port forwarding
      common_ports = {3000, 8080, 5000, 3001}, -- Common ports to auto-forward

      -- Dynamic port allocation settings
      enable_dynamic_ports = true,          -- Enable dynamic port allocation
      port_range_start = 10000,             -- Start of dynamic port range
      port_range_end = 20000,               -- End of dynamic port range
      conflict_resolution = 'auto',         -- Port conflict resolution strategy
    }
<

Dynamic Port Options:
  • enable_dynamic_ports   - Enable/disable dynamic port allocation
  • port_range_start       - Starting port number for dynamic allocation
  • port_range_end         - Ending port number for dynamic allocation
  • conflict_resolution    - How to handle port conflicts:
                             'auto' - automatically find alternative ports
                             'prompt' - ask user for resolution
                             'error' - fail with error message

workspace                                        *devcontainer-config-workspace*
    Type: |table|
    Default: See below

    Workspace configuration:
>lua
    workspace = {
      auto_mount = true,
      mount_point = '/workspace',
      exclude_patterns = { '.git', 'node_modules', '.next' },
    }
<

==============================================================================
7. API                                                      *devcontainer-api*

The plugin exposes a Lua API for programmatic access:

Setup~
                                                         *devcontainer.setup()*
devcontainer.setup({config})
    Initialize the plugin with the given configuration.

Basic Operations~
                                                          *devcontainer.open()*
devcontainer.open([path])
    Open devcontainer configuration from path.

                                                         *devcontainer.build()*
devcontainer.build()
    Build the container image.

                                                         *devcontainer.start()*
devcontainer.start()
    Start the container.

                                                          *devcontainer.stop()*
devcontainer.stop()
    Stop the container.

Command Execution~
                                                          *devcontainer.exec()*
devcontainer.exec(command, [opts])
    Execute a command in the container.

    Parameters:
      • {command} (string) Command to execute
      • {opts} (table, optional) Options table

    Example: >lua
        require('devcontainer').exec('npm test')
<


Enhanced Terminal~
                                                      *devcontainer.terminal()*
devcontainer.terminal([opts])
    Open an enhanced terminal session with the given options.

    Parameters:
      • {opts} (table, optional) Options table with fields:
        - name (string): Session name
        - position (string): Terminal position
        - shell (string): Shell to use
        - width (number): Window width
        - height (number): Window height

    Example: >lua
        require('devcontainer').terminal({
          name = 'build',
          position = 'float',
          shell = '/bin/zsh'
        })
<

                                                  *devcontainer.terminal_new()*
devcontainer.terminal_new([name])
    Create a new terminal session.

                                                 *devcontainer.terminal_list()*
devcontainer.terminal_list()
    List all terminal sessions.

                                                *devcontainer.terminal_close()*
devcontainer.terminal_close([name])
    Close a terminal session.

                                            *devcontainer.terminal_close_all()*
devcontainer.terminal_close_all()
    Close all terminal sessions.

                                               *devcontainer.terminal_rename()*
devcontainer.terminal_rename(old_name, new_name)
    Rename a terminal session.

                                                 *devcontainer.terminal_next()*
devcontainer.terminal_next()
    Switch to next terminal session.

                                                 *devcontainer.terminal_prev()*
devcontainer.terminal_prev()
    Switch to previous terminal session.

                                               *devcontainer.terminal_status()*
devcontainer.terminal_status()
    Show terminal system status.

                                      *devcontainer.terminal_cleanup_history()*
devcontainer.terminal_cleanup_history([days])
    Clean up old terminal history files.

==============================================================================
NOTIFICATION LEVELS                            *devcontainer-notification-levels*

The plugin provides a comprehensive notification system with configurable
verbosity levels to reduce excessive notifications during development.

Notification Levels~

verbose                                *devcontainer-notification-level-verbose*
    Show all notifications including debug information, operation details,
    and status updates. Useful for debugging or when you want full visibility
    into plugin operations.

normal                                  *devcontainer-notification-level-normal*
    Default level. Shows important notifications including critical operations,
    container lifecycle events, and warnings. Routine operations are suppressed.

minimal                                *devcontainer-notification-level-minimal*
    Show only essential notifications: critical operations and container
    lifecycle events. Terminal operations and UI feedback are suppressed.

silent                                  *devcontainer-notification-level-silent*
    Show only error messages. All other notifications are suppressed.

Configuration~
>lua
    require('devcontainer').setup({
      ui = {
        notification_level = 'normal', -- Change to preferred level
      }
    })
<

Notification Categories~

The plugin categorizes notifications into these types:

• Critical: Fatal errors and important operations requiring user attention
• Container: Container lifecycle events (start, stop, build, attach)
• Terminal: Terminal session management notifications
• UI: User interface feedback (confirmations, selections)
• Status: Status information and routine operation feedback

Examples~

Quiet development (minimal notifications):
>lua
    require('devcontainer').setup({
      ui = { notification_level = 'minimal' }
    })
<

Debugging/development (verbose notifications):
>lua
    require('devcontainer').setup({
      ui = { notification_level = 'verbose' }
    })
<

Completely silent (errors only):
>lua
    require('devcontainer').setup({
      ui = { notification_level = 'silent' }
    })
<

Information~
                                                        *devcontainer.status()*
devcontainer.status()
    Get container status information.

                                                    *devcontainer.get_config()*
devcontainer.get_config()
    Get the current devcontainer configuration.

                                              *devcontainer.get_container_id()*
devcontainer.get_container_id()
    Get the current container ID.

==============================================================================
8. DEVCONTAINER.JSON                                      *devcontainer-json*

The plugin supports standard devcontainer.json format. Here are common fields:

Basic Configuration~
>json
    {
      "name": "My Development Container",
      "image": "mcr.microsoft.com/devcontainers/base:ubuntu",
      "workspaceFolder": "/workspace",
      "postCreateCommand": "echo 'Setup complete!'"
    }
<

Using Dockerfile~
>json
    {
      "name": "Custom Container",
      "dockerFile": "Dockerfile",
      "context": "..",
      "workspaceFolder": "/workspace"
    }
<

With Features~
>json
    {
      "name": "Node.js Project",
      "image": "mcr.microsoft.com/devcontainers/javascript-node:18",
      "features": {
        "ghcr.io/devcontainers/features/git:1": {},
        "ghcr.io/devcontainers/features/github-cli:1": {}
      }
    }
<

Environment Customization~

Environment variables and language-specific settings can be customized using the
`devcontainer.nvim` customizations section:

Language presets:
>json
    {
      "name": "Go Project",
      "image": "mcr.microsoft.com/devcontainers/go:1-1.23-bookworm",
      "postCreateCommand": "go install golang.org/x/tools/gopls@latest",
      "customizations": {
        "devcontainer.nvim": {
          "languagePreset": "go"
        }
      }
    }
<

Custom environment variables:
>json
    {
      "name": "Python Project",
      "image": "mcr.microsoft.com/devcontainers/python:3.11",
      "customizations": {
        "devcontainer.nvim": {
          "languagePreset": "python",
          "postCreateEnvironment": {
            "PATH": "/custom/bin:$PATH",
            "PYTHONPATH": "/workspace/src"
          },
          "execEnvironment": {
            "DEBUG": "true"
          },
          "lspEnvironment": {
            "PYTHON_LSP_SERVER": "pylsp"
          }
        }
      }
    }
<

Available language presets: go, python, node, rust, default
Environment contexts:
  • postCreateEnvironment: For postCreateCommand execution
  • execEnvironment: For DevcontainerExec commands
  • lspEnvironment: For LSP server detection and startup

Port Forwarding~

Basic port forwarding:
>json
    {
      "name": "Web App",
      "image": "node:18",
      "forwardPorts": [3000, 8080],
      "portsAttributes": {
        "3000": {
          "label": "Application",
          "onAutoForward": "notify"
        }
      }
    }
<

Dynamic Port Allocation (Advanced)~

The plugin supports dynamic port allocation to avoid conflicts between
projects. Three port specification formats are available:

>json
    {
      "name": "Multi-Project Safe",
      "image": "node:18",
      "forwardPorts": [
        3000,                    // Fixed port (traditional)
        "auto:3001",            // Auto-allocate available port
        "range:8000-8010:3002", // Allocate from specific range
        "8080:3003"             // Host:container mapping
      ]
    }
<

Port Format Specifications:
  • `3000`                     - Fixed port on both host and container
  • `"8080:3000"`             - Map host port 8080 to container port 3000
  • `"auto:3001"`             - Auto-allocate available host port for container port 3001
  • `"range:8000-8010:3002"`  - Allocate host port from range 8000-8010 for container port 3002

Dynamic ports are allocated from the configured range (default: 10000-20000)
and tracked per project to avoid conflicts. Use |:DevcontainerPorts| to view
current port allocations.

Configuration example for dynamic ports:
>lua
    require('devcontainer').setup({
      port_forwarding = {
        enable_dynamic_ports = true,     -- Enable dynamic allocation
        port_range_start = 10000,        -- Start of dynamic range
        port_range_end = 20000,          -- End of dynamic range
        conflict_resolution = 'auto',    -- 'auto', 'prompt', 'error'
      }
    })
<

Environment Variables~
>json
    {
      "name": "Python App",
      "image": "python:3.11",
      "containerEnv": {
        "FLASK_ENV": "development",
        "DATABASE_URL": "postgresql://localhost/myapp"
      }
    }
<

Mounts~
>json
    {
      "name": "Data Science",
      "image": "jupyter/scipy-notebook",
      "mounts": [
        "source=${localWorkspaceFolder}/data,target=/data,type=bind",
        "source=myvolume,target=/cache,type=volume"
      ]
    }
<

==============================================================================
9. TROUBLESHOOTING                               *devcontainer-troubleshooting*

Docker Issues~

Docker not running:
  1. Check Docker status: >bash
        docker info
<
  2. Start Docker daemon: >bash
        sudo systemctl start docker
<

Permission denied:
  • Add user to docker group: >bash
        sudo usermod -aG docker $USER
<
  • Log out and back in

Container Issues~

Container won't start:
  1. Check logs: >vim
        :DevcontainerLogs
<
  2. Debug information: >vim
        :DevcontainerDebug
<
  3. Try rebuilding: >vim
        :DevcontainerBuild
<

LSP not working:
  1. Check LSP status: >vim
        :DevcontainerLspStatus
<
  2. Manually setup LSP: >vim
        :DevcontainerLspSetup
<
  3. Verify language server is installed in container

Port Forwarding Issues~

Port conflicts between projects:
  • Use dynamic port allocation: >json
        "forwardPorts": ["auto:3000", "range:8000-8010:3001"]
<
  • Check port status: >vim
        :DevcontainerPorts
<
  • View port statistics: >vim
        :DevcontainerPortStats
<

Port allocation errors:
  1. Check if dynamic ports are enabled in configuration
  2. Verify port range is not exhausted: >vim
        :DevcontainerPortStats
<
  3. Manually clean up old allocations by restarting containers

Service not accessible on forwarded port:
  1. Check if service is bound to 0.0.0.0 (not just localhost)
  2. Verify port is correctly mapped: >vim
        :DevcontainerPorts
<
  3. Check firewall settings on host machine

Performance Issues~

Slow file operations:
  • Add to devcontainer.json: >json
        "mounts": [
          "source=${localWorkspaceFolder},target=/workspace,type=bind,consistency=cached"
        ]
<

Large Docker images:
  • Use .dockerignore to exclude unnecessary files
  • Use multi-stage builds in Dockerfile

Common Error Messages~

"No devcontainer.json found":
  • Ensure .devcontainer/devcontainer.json exists
  • Check file permissions

"Container name conflicts":
  • The plugin now uses project-path-based unique names
  • Old containers may need manual removal

"LSP client not found":
  • Ensure nvim-lspconfig is installed
  • Check that language server is in container PATH

"Port resolution failed":
  • Check if dynamic port range is exhausted
  • Verify conflict_resolution setting in configuration
  • Try expanding port range or cleaning up old allocations

"No available port found":
  • Increase port range size in configuration
  • Check for port conflicts with other applications
  • Use :DevcontainerPortStats to monitor usage

Terminal Issues~

"Terminal session not starting":
  • Check container is running: :DevcontainerStatus
  • Verify terminal configuration: :DevcontainerConfig
  • Try different shell: :DevcontainerTerminal --shell=/bin/sh

"Terminal history not persisting":
  • Verify persistent_history is enabled in configuration
  • Check history directory permissions
  • Ensure adequate disk space for history storage
  • Use :DevcontainerTerminalStatus to check history statistics

"Session list appears empty":
  • Invalid sessions are automatically cleaned up
  • Create new session: :DevcontainerTerminalNew
  • Check container connectivity and status

"Multiple terminal sessions not working":
  • Ensure unique session names
  • Use :DevcontainerTerminalList to view all sessions
  • Check for session conflicts: :DevcontainerTerminalStatus

"Terminal keybindings not working":
  • Verify keymaps configuration in terminal settings
  • Check for keymap conflicts with other plugins
  • Ensure terminal is in correct buffer context

"Floating terminal sizing issues":
  • Adjust float.width and float.height ratios
  • Check terminal content fits in window size
  • Verify border configuration settings

"Terminal performance problems":
  • Reduce max_history_lines setting
  • Disable persistent_history if not needed
  • Clean old history: :DevcontainerTerminalCleanup
  • Check for large history files

==============================================================================
11. USER EVENTS                                         *devcontainer-events*

The plugin triggers User autocmd events during devcontainer lifecycle changes.
These can be used to update statuslines, run custom commands, or integrate
with other plugins.

Available Events~

                                                  *DevcontainerOpened*
DevcontainerOpened
    Triggered when a devcontainer configuration is successfully loaded.

    Event data:
      • container_name (string): Name of the devcontainer
      • config_path (string): Path to devcontainer.json
      • reconnected (boolean): True if reconnecting to existing container
      • attached (boolean): True if attaching to external container

                                                  *DevcontainerBuilt*
DevcontainerBuilt
    Triggered when a container image is built or prepared.

    Event data:
      • container_name (string): Name of the devcontainer
      • image (string): Docker image name

                                                  *DevcontainerStarted*
DevcontainerStarted
    Triggered when a container starts successfully.

    Event data:
      • container_id (string): Docker container ID
      • container_name (string): Name of the devcontainer

                                                  *DevcontainerStopped*
DevcontainerStopped
    Triggered when a container stops or is killed.

    Event data:
      • container_id (string): Docker container ID
      • container_name (string): Name of the devcontainer

                                                  *DevcontainerClosed*
DevcontainerClosed
    Triggered when the devcontainer is closed or reset.

    Event data:
      • container_id (string): Docker container ID (may be nil)
      • container_name (string): Name of the devcontainer

Usage Examples~

Basic event listener:
>lua
    vim.api.nvim_create_autocmd('User', {
      pattern = 'DevcontainerStarted',
      callback = function(args)
        local data = args.data or {}
        print('Container started: ' .. (data.container_name or 'unknown'))
      end,
    })
<

Statusline integration:
>lua
    local augroup = vim.api.nvim_create_augroup('DevcontainerStatusline', { clear = true })

    vim.api.nvim_create_autocmd('User', {
      pattern = { 'DevcontainerStarted', 'DevcontainerStopped', 'DevcontainerClosed' },
      group = augroup,
      callback = function(args)
        vim.g.devcontainer_status = args.match:gsub('Devcontainer', ''):lower()
        vim.g.devcontainer_name = args.data and args.data.container_name
        -- Trigger statusline refresh
        vim.cmd('redrawstatus')
      end,
    })
<

See |examples/statusline_events.lua| for a complete statusline implementation.

==============================================================================
12. CONTRIBUTING                                   *devcontainer-contributing*

Contributions are welcome! Visit the GitHub repository:
https://github.com/ksoichiro/devcontainer.nvim

Development Setup~

1. Fork and clone the repository
2. Install development dependencies: >bash
        make install-dev
        make install-hooks
<
3. Make changes and test
4. Run quality checks: >bash
        make lint
        make test
<
5. Submit pull request

Reporting Issues~

Please include:
  • Neovim version (:version)
  • Docker version (docker --version)
  • devcontainer.json content
  • Debug output (:DevcontainerDebug)
  • Error messages and logs

==============================================================================
vim:tw=78:ts=8:ft=help:norl:
